// Automatically generated from the message definition "tf2_msgs/LookupTransformGoal.msg"
package tf2_msgs

import (
	"bytes"
	"encoding/binary"

	"github.com/fetchrobotics/rosgo/ros"
)

type _MsgLookupTransformGoal struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgLookupTransformGoal) Text() string {
	return t.text
}

func (t *_MsgLookupTransformGoal) Name() string {
	return t.name
}

func (t *_MsgLookupTransformGoal) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgLookupTransformGoal) NewMessage() ros.Message {
	m := new(LookupTransformGoal)
	m.TargetFrame = ""
	m.SourceFrame = ""
	m.SourceTime = ros.Time{}
	m.Timeout = ros.Duration{}
	m.TargetTime = ros.Time{}
	m.FixedFrame = ""
	m.Advanced = false
	return m
}

var (
	MsgLookupTransformGoal = &_MsgLookupTransformGoal{
		`# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#Simple API
string target_frame
string source_frame
time source_time
duration timeout

#Advanced API
time target_time
string fixed_frame

#Whether or not to use the advanced API
bool advanced

`,
		"tf2_msgs/LookupTransformGoal",
		"35e3720468131d675a18bb6f3e5f22f8",
	}
)

type LookupTransformGoal struct {
	TargetFrame string       `rosmsg:"target_frame:string"`
	SourceFrame string       `rosmsg:"source_frame:string"`
	SourceTime  ros.Time     `rosmsg:"source_time:time"`
	Timeout     ros.Duration `rosmsg:"timeout:duration"`
	TargetTime  ros.Time     `rosmsg:"target_time:time"`
	FixedFrame  string       `rosmsg:"fixed_frame:string"`
	Advanced    bool         `rosmsg:"advanced:bool"`
}

func (m *LookupTransformGoal) GetType() ros.MessageType {
	return MsgLookupTransformGoal
}

func (m *LookupTransformGoal) Serialize(buf *bytes.Buffer) error {
	var err error
	binary.Write(buf, binary.LittleEndian, uint32(len([]byte(m.TargetFrame))))
	buf.Write([]byte(m.TargetFrame))
	binary.Write(buf, binary.LittleEndian, uint32(len([]byte(m.SourceFrame))))
	buf.Write([]byte(m.SourceFrame))
	binary.Write(buf, binary.LittleEndian, m.SourceTime.Sec)
	binary.Write(buf, binary.LittleEndian, m.SourceTime.NSec)
	binary.Write(buf, binary.LittleEndian, m.Timeout.Sec)
	binary.Write(buf, binary.LittleEndian, m.Timeout.NSec)
	binary.Write(buf, binary.LittleEndian, m.TargetTime.Sec)
	binary.Write(buf, binary.LittleEndian, m.TargetTime.NSec)
	binary.Write(buf, binary.LittleEndian, uint32(len([]byte(m.FixedFrame))))
	buf.Write([]byte(m.FixedFrame))
	binary.Write(buf, binary.LittleEndian, m.Advanced)
	return err
}

func (m *LookupTransformGoal) Deserialize(buf *bytes.Reader) error {
	var err error = nil
	{
		var size uint32
		if err = binary.Read(buf, binary.LittleEndian, &size); err != nil {
			return err
		}
		data := make([]byte, int(size))
		if err = binary.Read(buf, binary.LittleEndian, data); err != nil {
			return err
		}
		m.TargetFrame = string(data)
	}
	{
		var size uint32
		if err = binary.Read(buf, binary.LittleEndian, &size); err != nil {
			return err
		}
		data := make([]byte, int(size))
		if err = binary.Read(buf, binary.LittleEndian, data); err != nil {
			return err
		}
		m.SourceFrame = string(data)
	}
	{
		if err = binary.Read(buf, binary.LittleEndian, &m.SourceTime.Sec); err != nil {
			return err
		}
		if err = binary.Read(buf, binary.LittleEndian, &m.SourceTime.NSec); err != nil {
			return err
		}
	}
	{
		if err = binary.Read(buf, binary.LittleEndian, &m.Timeout.Sec); err != nil {
			return err
		}
		if err = binary.Read(buf, binary.LittleEndian, &m.Timeout.NSec); err != nil {
			return err
		}
	}
	{
		if err = binary.Read(buf, binary.LittleEndian, &m.TargetTime.Sec); err != nil {
			return err
		}
		if err = binary.Read(buf, binary.LittleEndian, &m.TargetTime.NSec); err != nil {
			return err
		}
	}
	{
		var size uint32
		if err = binary.Read(buf, binary.LittleEndian, &size); err != nil {
			return err
		}
		data := make([]byte, int(size))
		if err = binary.Read(buf, binary.LittleEndian, data); err != nil {
			return err
		}
		m.FixedFrame = string(data)
	}
	if err = binary.Read(buf, binary.LittleEndian, &m.Advanced); err != nil {
		return err
	}
	return err
}
