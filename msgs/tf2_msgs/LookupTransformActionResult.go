// Automatically generated from the message definition "tf2_msgs/LookupTransformActionResult.msg"
package tf2_msgs

import (
	"bytes"
	"ee631_midterm/msgs/actionlib_msgs"
	"ee631_midterm/msgs/std_msgs"

	"github.com/fetchrobotics/rosgo/ros"
)

type _MsgLookupTransformActionResult struct {
	text   string
	name   string
	md5sum string
}

func (t *_MsgLookupTransformActionResult) Text() string {
	return t.text
}

func (t *_MsgLookupTransformActionResult) Name() string {
	return t.name
}

func (t *_MsgLookupTransformActionResult) MD5Sum() string {
	return t.md5sum
}

func (t *_MsgLookupTransformActionResult) NewMessage() ros.Message {
	m := new(LookupTransformActionResult)
	m.Header = std_msgs.Header{}
	m.Status = actionlib_msgs.GoalStatus{}
	m.Result = LookupTransformResult{}
	return m
}

var (
	MsgLookupTransformActionResult = &_MsgLookupTransformActionResult{
		`# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalStatus status
LookupTransformResult result
`,
		"tf2_msgs/LookupTransformActionResult",
		"ac26ce75a41384fa8bb4dc10f491ab90",
	}
)

type LookupTransformActionResult struct {
	Header std_msgs.Header           `rosmsg:"header:Header"`
	Status actionlib_msgs.GoalStatus `rosmsg:"status:GoalStatus"`
	Result LookupTransformResult     `rosmsg:"result:LookupTransformResult"`
}

func (m *LookupTransformActionResult) GetType() ros.MessageType {
	return MsgLookupTransformActionResult
}

func (m *LookupTransformActionResult) Serialize(buf *bytes.Buffer) error {
	var err error
	if err = m.Header.Serialize(buf); err != nil {
		return err
	}
	if err = m.Status.Serialize(buf); err != nil {
		return err
	}
	if err = m.Result.Serialize(buf); err != nil {
		return err
	}
	return err
}

func (m *LookupTransformActionResult) Deserialize(buf *bytes.Reader) error {
	var err error = nil
	if err = m.Header.Deserialize(buf); err != nil {
		return err
	}
	if err = m.Status.Deserialize(buf); err != nil {
		return err
	}
	if err = m.Result.Deserialize(buf); err != nil {
		return err
	}
	return err
}
